import sys 
 
class TicTacToe: 
    def __init__(self): 
        self.board = [' ' for _ in range(9)] 
        self.current_winner = None 
 
    def print_board(self): 
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]: 
            print('| ' + ' | '.join(row) + ' |') 
 
    def make_move(self, square, letter): 
        if self.board[square] == ' ': 
            self.board[square] = letter 
            return True 
        return False 
 
    def winner(self, square, letter): 
        row_ind = square // 3 
        row = self.board[row_ind*3:(row_ind+1)*3] 
        if all([spot == letter for spot in row]): 
            return True 
        col_ind = square % 3 
        col = [self.board[col_ind+i*3] for i in range(3)] 
        if all([spot == letter for spot in col]): 
            return True 
        if square % 2 == 0: 
            diagonal1 = [self.board[i] for i in [0, 4, 8]] 
            if all([spot == letter for spot in diagonal1]): 
                return True 
            diagonal2 = [self.board[i] for i in [2, 4, 6]] 
            if all([spot == letter for spot in diagonal2]): 
                return True 
        return False 
 
    def available_moves(self): 
        return [i for i, spot in enumerate(self.board) if spot == ' '] 
 
    def empty_squares(self): 
        return ' ' in self.board 
 
    def num_empty_squares(self): 
        return self.board.count(' ') 
 
def minimax(game, maximizing_player): 
    if game.current_winner == 'X': 
        return -1 
    elif game.current_winner == 'O': 
        return 1 
    elif not game.empty_squares(): 
        return 0 
 
    if maximizing_player: 
        max_eval = -sys.maxsize 
        for move in game.available_moves(): 
            game.make_move(move, 'O') 
            eval = minimax(game, False) 
            game.board[move] = ' ' 
            max_eval = max(max_eval, eval) 
        return max_eval 
    else: 
        min_eval = sys.maxsize 
        for move in game.available_moves(): 
            game.make_move(move, 'X') 
            eval = minimax(game, True) 
            game.board[move] = ' ' 
            min_eval = min(min_eval, eval) 
        return min_eval 
 
def get_best_move(game): 
    best_move = -1 
    best_eval = -sys.maxsize 
    for move in game.available_moves(): 
        game.make_move(move, 'O') 
        eval = minimax(game, False) 
        game.board[move] = ' ' 
        if eval > best_eval: 
            best_eval = eval 
            best_move = move 
    return best_move 
 
def play(): 
    game = TicTacToe() 
    while game.empty_squares(): 
        square = get_best_move(game) 
        game.make_move(square, 'O') 
        game.print_board() 
        if game.winner(square, 'O'): 
            print("Computer wins!") 
            break 
        elif not game.empty_squares(): 
            print("It's a tie!") 
            break 
        square = int(input("Enter your move (0-8): ")) 
        if game.make_move(square, 'X'): 
            game.print_board() 
            print('') 
            if game.winner(square, 'X'): 
                print("You win!") 
                break 
        else: 
            print("Invalid move!") 
 
if __name__ == "__main__": 
    play()