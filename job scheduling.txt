def merge_sort(arr):
    if len(arr) > 1:
   	 mid = len(arr)//2
   	 L = arr[:mid]
   	 R = arr[mid:]
   	 
   	 merge_sort(L)
   	 merge_sort(R)
   	 
   	 i=j=k=0
   	 
   	 while i < len(L) and j < len(R):
   		 if L[i][2] > R[j][2]:
   			 arr[k] = L[i]
   			 i += 1
   			 
   		 else:
   			 arr[k] = R[j]
   			 j += 1
   			 
   		 k += 1
   		 
   	 while i < len(L):
   		 arr[k] = L[i]
   		 i += 1
   		 k += 1
   		 
   	 while j < len(R):
   		 arr[k] = R[j]
   		 j += 1
   		 k += 1
   			 
def job_scheduler(arr,t):
    merge_sort(arr)
    result = [False] * t
    job = ['-1'] * t
    total_profit = 0
    
    for i in range(len(arr)):
   	 for j in range(min(t-1,arr[i][1]-1), -1, -1):
   		 if result[j] is False:
   			 result[j] = True
   			 job[j] = arr[i][0]
   			 total_profit += arr[i][2]
   			 break
    print("Job Sequence: ", job)
    return total_profit
    
if __name__ == '__main__':
    n = int(input("Enter the number of jobs: "))
    arr = []
    for i in range(n):
   	 job_id = input("Enter job id: ")
   	 deadline = int(input("Enter job deadline: "))
   	 profit = int(input("Enter job profit: "))
   	 arr.append([job_id, deadline, profit])
   	 
    t = int(input("Enter number of time slots: "))
    
    print("Following is the maximum profit of the sequence of jobs:")
    max_profit = job_scheduler(arr,t)
    print("Maximum Profit = ", max_profit)